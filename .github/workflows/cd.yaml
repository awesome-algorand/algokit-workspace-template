name: Continuous Delivery of Template

on:
  push:
    branches:
      - main

concurrency: release

jobs:
  tag-release:
    runs-on: "ubuntu-latest"
    permissions:
      contents: "write"
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Tag release
        id: tag
        uses: TriPSs/conventional-changelog-action@v3.18.0
        with:
          skip-commit: "true"
          tag-prefix: ""
          skip-on-empty: "false"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: ${{ steps.tag.outputs.skipped == 'false' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          body: ${{ steps.tag.outputs.clean_changelog }}
      - name: Install poetry
        run: pipx install poetry

      - name: Install algokit
        run: pipx install algokit

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'poetry'

      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      - name: Check formatting with Black
        run: |
          # stop the build if there are files that don't meet formatting requirements
          poetry run black --check .

      - name: Check linting with Ruff
        run: |
          # stop the build if there are Python syntax errors or undefined names
          poetry run ruff .

      - name: Configure git
        shell: bash
        run: |
          # set git user and email as test invoke git
          git config --global user.email "actions@github.com" && git config --global user.name "github-actions"
      - name: Install algokit
        run: pipx install copier
      - name: Build template
        run: copier copy --defaults --trust . example
      - name: Push
        uses: s0/git-publish-subdir-action@develop
        env:
          REPO: self
          BRANCH: get-started
          FOLDER: example
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MESSAGE: ${{ steps.tag.outputs.tag }} ({sha}) {msg}
